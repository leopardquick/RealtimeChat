<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">

    <link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1" crossorigin="anonymous">

    <link rel="apple-touch-icon" sizes="180x180" href="/static/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/static/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/static/favicon-16x16.png">
    <link rel="manifest" href="/static/site.webmanifest">

    <style>
        .chatBox {
            padding: 0.5em;
            outline: 1px solid silver;
            min-height: 150px;
        }
    </style>
    <title>Home</title>
</head>
<body>
<div class="container">
    <div class="row">
        <div class="col-md-8">
            <h1 class="mt-3">Realtime Message</h1>
            <hr>

           

            <div class="form-group">
                <label for="username">Username:</label>
                <input class="form-control" type="text" name="username" id="username" autocomplete="off">
            </div>

            <div class="form-group mt-2">
                <label for="message">Message:</label>
                <input class="form-control" type="text" name="message" id="message" autocomplete="off">
            </div>
            <hr>
            <a href="javascript:void(0);" id="sendBtn" class="btn btn-outline-secondary">Send message</a>

            <div id="status" class="mt-2 float-end">

            </div>

            <div class="clearfix"></div>

            <div id="output" class="chatBox mt-2">

            </div>
        </div>
        <div class="col-md-4">
            <h1 class="mt-3">Who's Online</h1>
            <hr>
            <ul id="online_users">

            </ul>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ygbV9kiqUc6oa4msXn9868pTtWMgiQaeYH7/t7LECLbyPA2x65Kgf80OJFdroafW"
        crossorigin="anonymous"></script>

<script src="https://unpkg.com/notie"></script>
<script src="/static/reconnecting-websocket.min.js"></script>

<script>

    let socket = null;
    let o = document.getElementById("output")

    window.onbeforeunload = function(){
        console.log("leaving");
        let jsonData = {};
        jsonData["action"] = "left";
        socket.send(JSON.stringify(jsonData));
    };

    document.addEventListener("DOMContentLoaded", function () {

        socket = new ReconnectingWebSocket("ws://127.0.0.1:8080/ws", null, {debug: true, reconnectInterval: 3000});

        document.getElementById("sendBtn").addEventListener("click", function () {
            if (!socket) {
                console.log("no connection");
                return false;
            }
            sendMessage()
        })

        document.getElementById("message").addEventListener("keydown", function (event) {
            if (event.code === "Enter") {
                if (!socket) {
                    console.log("no connection");
                    return false;
                }
                event.preventDefault();
                event.stopPropagation();
                sendMessage();
            }
        })

        document.getElementById("username").addEventListener("change", function () {
            let jsonData = {};
            jsonData["action"] = "username";
            jsonData["username"] = this.value;
            socket.send(JSON.stringify(jsonData));
        })

        const offline = `<span class="badge bg-danger">Not connected</span>`;
        const online = `<span class="badge bg-success">Connected</span>`;
        let statusDiv = document.getElementById("status");

        socket.onopen = () => {
            console.log("Successfully Connected");
            statusDiv.innerHTML = online;
            let jsonData = {};
            jsonData["action"] = "entered";
            socket.send(JSON.stringify(jsonData));

            jsonData["action"] = "who";
            socket.send(JSON.stringify(jsonData));
        };

        socket.onclose = event => {
            socket.send("Client Closed!");
            statusDiv.innerHTML = offline;
        };

        socket.onerror = error => {
            o.innerHTML = o.innerHTML + `<small class="text-danger"><em>Disconnected from server!</em></small><br>`;
            statusDiv.innerHTML = offline;
        };

        socket.onmessage = msg => {
            let data = JSON.parse(msg.data);
            console.log("action is", data.action);
            switch (data.action) {
                case "broadcast":
                    o.innerHTML = o.innerHTML + data.message + "<br>";
                    break;
                case "alert":
                    notify(data.message, data.message_type);
                    break;
                case "entered":
                    console.log("entered!")
                    o.innerHTML = o.innerHTML + data.message + "<br>";
                    break;
                case "left":
                    o.innerHTML = o.innerHTML + data.message + "<br>";
                    break;
                case "list_users":
                    console.log("got list users push");
                    console.log(data);
                    let ul = document.getElementById("online_users");
                    while (ul.firstChild) ul.removeChild(ul.firstChild);

                    if (data.connected_users.length > 0) {
                        data.connected_users.forEach(function (item) {
                            console.log(item);
                            let li = document.createElement("li");
                            li.appendChild(document.createTextNode(item));
                            ul.appendChild(li)
                        })
                    }
                    break;
                default:
                    o.innerHTML = o.innerHTML + data.message + "<br>";
            }
        }
    })

    function sendMessage() {
        let jsonData = {};
        jsonData["action"] = "broadcast";
        let msg = document.getElementById("message");
        let user = document.getElementById("username");
        if ((msg.value !== "") && (user.value !== "")) {
            jsonData["username"] = document.getElementById("username").value;
            jsonData["message"] = document.getElementById("message").value;
            socket.send(JSON.stringify(jsonData));
            msg.value = "";
        } else {
            notify("You must specify a username & message!", "error");
        }
    }

    // handle posting alerts
    function notify(msg, msgType) {
        let stay = false;
        if (msgType === "error") {
            stay = true;
        }
        notie.alert({
            type: msgType,
            text: msg,
            stay: stay,
        })
    }


!function(a,b){"function"==typeof define&&define.amd?define([],b):"undefined"!=typeof module&&module.exports?module.exports=b():a.ReconnectingWebSocket=b()}(this,function(){function a(b,c,d){function l(a,b){var c=document.createEvent("CustomEvent");return c.initCustomEvent(a,!1,!1,b),c}var e={debug:!1,automaticOpen:!0,reconnectInterval:1e3,maxReconnectInterval:3e4,reconnectDecay:1.5,timeoutInterval:2e3};d||(d={});for(var f in e)this[f]="undefined"!=typeof d[f]?d[f]:e[f];this.url=b,this.reconnectAttempts=0,this.readyState=WebSocket.CONNECTING,this.protocol=null;var h,g=this,i=!1,j=!1,k=document.createElement("div");k.addEventListener("open",function(a){g.onopen(a)}),k.addEventListener("close",function(a){g.onclose(a)}),k.addEventListener("connecting",function(a){g.onconnecting(a)}),k.addEventListener("message",function(a){g.onmessage(a)}),k.addEventListener("error",function(a){g.onerror(a)}),this.addEventListener=k.addEventListener.bind(k),this.removeEventListener=k.removeEventListener.bind(k),this.dispatchEvent=k.dispatchEvent.bind(k),this.open=function(b){h=new WebSocket(g.url,c||[]),b||k.dispatchEvent(l("connecting")),(g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","attempt-connect",g.url);var d=h,e=setTimeout(function(){(g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","connection-timeout",g.url),j=!0,d.close(),j=!1},g.timeoutInterval);h.onopen=function(){clearTimeout(e),(g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","onopen",g.url),g.protocol=h.protocol,g.readyState=WebSocket.OPEN,g.reconnectAttempts=0;var d=l("open");d.isReconnect=b,b=!1,k.dispatchEvent(d)},h.onclose=function(c){if(clearTimeout(e),h=null,i)g.readyState=WebSocket.CLOSED,k.dispatchEvent(l("close"));else{g.readyState=WebSocket.CONNECTING;var d=l("connecting");d.code=c.code,d.reason=c.reason,d.wasClean=c.wasClean,k.dispatchEvent(d),b||j||((g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","onclose",g.url),k.dispatchEvent(l("close")));var e=g.reconnectInterval*Math.pow(g.reconnectDecay,g.reconnectAttempts);setTimeout(function(){g.reconnectAttempts++,g.open(!0)},e>g.maxReconnectInterval?g.maxReconnectInterval:e)}},h.onmessage=function(b){(g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","onmessage",g.url,b.data);var c=l("message");c.data=b.data,k.dispatchEvent(c)},h.onerror=function(b){(g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","onerror",g.url,b),k.dispatchEvent(l("error"))}},1==this.automaticOpen&&this.open(!1),this.send=function(b){if(h)return(g.debug||a.debugAll)&&console.debug("ReconnectingWebSocket","send",g.url,b),h.send(b);throw"INVALID_STATE_ERR : Pausing to reconnect websocket"},this.close=function(a,b){"undefined"==typeof a&&(a=1e3),i=!0,h&&h.close(a,b)},this.refresh=function(){h&&h.close()}}return a.prototype.onopen=function(){},a.prototype.onclose=function(){},a.prototype.onconnecting=function(){},a.prototype.onmessage=function(){},a.prototype.onerror=function(){},a.debugAll=!1,a.CONNECTING=WebSocket.CONNECTING,a.OPEN=WebSocket.OPEN,a.CLOSING=WebSocket.CLOSING,a.CLOSED=WebSocket.CLOSED,a});

</script>


</body>
</html>